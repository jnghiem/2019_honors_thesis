density <- 1300 #density for 40/100 and 60/200 walnut shell in kg/m3
data <- data %>%
filter(!is.na(time)) %>%
mutate(height=height/100, vol=vol/1000, mass=mass) %>% #height in m, volume in L, mass in g
mutate(mvc=mass/vol) #mass concentration in g/L, same as kg/m3
data <- filter(data, location=="U") %>%
select(height, time, mvc) %>%
arrange(time)
refh <- 0.05
data
#03 Peristaltic Pump Sediment Concentration Time Series
#This script processes the data from peristaltic pump samples for use in the settling velocity computation.
library(data.table)
library(dplyr)
library(magrittr)
data <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\1019pumpdata.csv", data.table=FALSE) %>%
select(-2, -6, -7, -9, -10)
names(data) <- c("time", "location", "height", "vol", "mass")
density <- 1300 #density for 40/100 and 60/200 walnut shell in kg/m3
data <- data %>%
filter(!is.na(time)) %>%
mutate(height=height/100, vol=vol/1000, mass=mass) %>% #height in m, volume in L, mass in g
mutate(mvc=mass/vol) #mass concentration in g/L, same as kg/m3
data <- filter(data, location=="U") %>%
select(height, time, mvc) %>%
arrange(height, time)
refh <- 0.05
data
#03 Peristaltic Pump Sediment Concentration Time Series
#This script processes the data from peristaltic pump samples for use in the settling velocity computation.
library(data.table)
library(dplyr)
library(magrittr)
data <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\1019pumpdata.csv", data.table=FALSE) %>%
select(-2, -6, -7, -9, -10)
names(data) <- c("time", "location", "height", "vol", "mass")
density <- 1300 #density for 40/100 and 60/200 walnut shell in kg/m3
data <- data %>%
filter(!is.na(time)) %>%
mutate(height=height/100, vol=vol/1000, mass=mass) %>% #height in m, volume in L, mass in g
mutate(mvc=mass/vol) #mass concentration in g/L, same as kg/m3
data <- filter(data) %>%
select(height, location, time, mvc) %>%
arrange(height, location, time)
refh <- 0.05
data
#03 Peristaltic Pump Sediment Concentration Time Series
#This script processes the data from peristaltic pump samples for use in the settling velocity computation.
library(data.table)
library(dplyr)
library(magrittr)
#Processing the data
data <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\1019pumpdata.csv", data.table=FALSE) %>% #reading in the data
select(-2, -6, -7, -9, -10) #selecting the important fields
names(data) <- c("time", "location", "height", "vol", "mass") #giving more succinct field names
data <- data %>%
filter(!is.na(time)) %>% #removing the blanks
mutate(height=height/100, vol=vol/1000, mass=mass) %>% #height in m, volume in L, mass in g
mutate(mvc=mass/vol) #mass concentration in g/L, same as kg/m3
data <- data %>%
select(height, location, time, mvc) %>% #selecting the important fields
arrange(height, location, time) #rearranging the rows for readibility
data
#03 Peristaltic Pump Sediment Concentration Time Series
#This script processes the data from peristaltic pump samples for use in the settling velocity computation.
library(data.table)
library(dplyr)
library(magrittr)
#Processing the data
data <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\1019pumpdata.csv", data.table=FALSE) %>% #reading in the data
select(-2, -6, -7, -9, -10) #selecting the important fields
names(data) <- c("time", "location", "height", "vol", "mass") #giving more succinct field names
data <- data %>%
filter(!is.na(time)) %>% #removing the blanks
mutate(height=height/100, vol=vol/1000, mass=mass) %>% #height in m, volume in L, mass in g
mutate(mvc=mass/vol) #mass concentration in g/L, same as kg/m3
concentrationdata <- data %>%
select(height, location, time, mvc) %>% #selecting the important fields
arrange(height, location, time) #rearranging the rows for readibility
concentrationdata
size_class
concentrationdata
spec_conc <- filter(concentrationdata, location==location, height==0.05)
spec_conc
?vector
spec_conc
#05 Rouse Equation Analysis
#This script is based on a Rouse sediment profile analysis, drawing on Lupker et al. 2011.
library(magrittr)
library(dplyr)
location <- "U" #location, either upstream (U) or downstream (D)
H <- 0.4
refh <- 0.05
#Rouse number computation
sv <- filter(sheardata, dowels=="F", height==0.07) #the shear velocity in m/s
if (location=="U") {
sv <- filter(sv, relative_position<0)[1,"shearv"]
} else if (location=="D") {
sv <- filter(sv, relative_position>0)[1,"shearv"]
}
rn_func <- function(ws) ws/(0.4*sv)
size_class <- size_class %>%
mutate(rn=rn_func(ws))
spec_conc <- filter(concentrationdata, location==location, height==refh)
spec_conc
library(magrittr)
library(dplyr)
loc <- "U" #location, either upstream (U) or downstream (D)
H <- 0.4
refh <- 0.05
#Rouse number computation
sv <- filter(sheardata, dowels=="F", height==0.07) #the shear velocity in m/s
if (location=="U") {
sv <- filter(sv, relative_position<0)[1,"shearv"]
} else if (location=="D") {
sv <- filter(sv, relative_position>0)[1,"shearv"]
}
rn_func <- function(ws) ws/(0.4*sv)
size_class <- size_class %>%
mutate(rn=rn_func(ws))
spec_conc <- filter(concentrationdata, location==loc, height==refh)
spec_conc
#05 Rouse Equation Analysis
#This script is based on a Rouse sediment profile analysis, drawing on Lupker et al. 2011.
library(magrittr)
library(dplyr)
loc <- "U" #location, either upstream (U) or downstream (D)
H <- 0.4
refh <- 0.05
#Rouse number computation
sv <- filter(sheardata, dowels=="F", height==0.07) #the shear velocity in m/s
if (location=="U") {
sv <- filter(sv, relative_position<0)[1,"shearv"]
} else if (location=="D") {
sv <- filter(sv, relative_position>0)[1,"shearv"]
}
rn_func <- function(ws) ws/(0.4*sv)
size_class <- size_class %>%
mutate(rn=rn_func(ws))
spec_conc <- filter(concentrationdata, location==loc, height==refh)
rp <- vector("list", length=nrow(size_class))
for (i in 1:nrow(size_class)) {
rp_t <- vector("list", length=nrow(spec_conc))
rn <- filter(size_class, class==i)[1,"rn"]
for (j in 1:nrow(spec_conc)) {
rp_t[[j]] <- function(z) {
inner_num <- (H-z)/z
inner_den <- (H-refh)/refh
inner <- (inner_num/inner_den)^rn
refcon <- spec_conc[j,"mvc"]
return(refcon*(inner^rn))
}
}
}
rp
#05 Rouse Equation Analysis
#This script is based on a Rouse sediment profile analysis, drawing on Lupker et al. 2011.
library(magrittr)
library(dplyr)
loc <- "U" #location, either upstream (U) or downstream (D)
H <- 0.4
refh <- 0.05
#Rouse number computation
sv <- filter(sheardata, dowels=="F", height==0.07) #the shear velocity in m/s
if (location=="U") {
sv <- filter(sv, relative_position<0)[1,"shearv"]
} else if (location=="D") {
sv <- filter(sv, relative_position>0)[1,"shearv"]
}
rn_func <- function(ws) ws/(0.4*sv)
size_class <- size_class %>%
mutate(rn=rn_func(ws))
spec_conc <- filter(concentrationdata, location==loc, height==refh)
rp <- vector("list", length=nrow(size_class))
for (i in 1:nrow(size_class)) {
rp_t <- vector("list", length=nrow(spec_conc))
rn <- filter(size_class, class==i)[1,"rn"]
for (j in 1:nrow(spec_conc)) {
rp_t[[j]] <- function(z) {
inner_num <- (H-z)/z
inner_den <- (H-refh)/refh
inner <- (inner_num/inner_den)^rn
refcon <- spec_conc[j,"mvc"]
return(refcon*(inner^rn))
}
}
rp[[i]] <- rp_t
}
rp
rp[[1]]
curve(rp[[16]][[15]], from=0, to=0.4)
curve(rp[[16]][[15]](x), from=0, to=0.4)
curve(rp[[16]][[15]](x), from=0, to=0.4)+coord_flip()
?coord_flip
curve(rp[[16]][[15]](x), from=0, to=0.4)
plot(x=sapply(seq(from=0, to=0.4, by=0.01), rp[[16]][[15]]), y=seq(from=0, to=0.4, by=0.01), type="L")
plot(x=sapply(seq(from=0, to=0.4, by=0.01), rp[[16]][[15]]), y=seq(from=0, to=0.4, by=0.01), type="L")
plot(x=sapply(seq(from=0, to=0.4, by=0.01), rp[[16]][[15]]), y=seq(from=0, to=0.4, by=0.01), type="l")
plot(x=sapply(seq(from=0, to=0.4, by=0.001), rp[[16]][[15]]), y=seq(from=0, to=0.4, by=0.001), type="l")
plot(x=sapply(seq(from=0, to=0.4, by=0.001), rp[[28]][[15]]), y=seq(from=0, to=0.4, by=0.001), type="l")
plot(x=sapply(seq(from=0, to=0.4, by=0.001), rp[[1]][[15]]), y=seq(from=0, to=0.4, by=0.001), type="l")
#05 Rouse Equation Analysis
#This script is based on a Rouse sediment profile analysis, drawing on Lupker et al. 2011.
library(magrittr)
library(dplyr)
loc <- "U" #location, either upstream (U) or downstream (D)
H <- 0.4
refh <- 0.05
#Rouse number computation
sv <- filter(sheardata, dowels=="F", height==0.07) #the shear velocity in m/s
if (location=="U") {
sv <- filter(sv, relative_position<0)[1,"shearv"]
} else if (location=="D") {
sv <- filter(sv, relative_position>0)[1,"shearv"]
}
rn_func <- function(ws) ws/(0.4*sv)
size_class <- size_class %>%
mutate(rn=rn_func(ws))
spec_conc <- filter(concentrationdata, location==loc, height==refh)
rp <- vector("list", length=nrow(size_class))
for (i in 1:nrow(size_class)) {
rp_t <- vector("list", length=nrow(spec_conc))
rn <- force(filter(size_class, class==i)[1,"rn"])
for (j in 1:nrow(spec_conc)) {
rp_t[[j]] <- function(z) {
inner_num <- (H-z)/z
inner_den <- (H-refh)/refh
inner <- (inner_num/inner_den)^rn
refcon <- force(spec_conc[j,"mvc"])
return(refcon*(inner^rn))
}
}
rp[[i]] <- rp_t
}
plot(x=sapply(seq(from=0, to=0.4, by=0.001), rp[[1]][[15]]), y=seq(from=0, to=0.4, by=0.001), type="l")
plot(x=sapply(seq(from=0, to=0.4, by=0.001), rp[[1]][[15]]), y=seq(from=0, to=0.4, by=0.001), type="l")
plot(x=sapply(seq(from=0, to=0.4, by=0.001), rp[[22]][[15]]), y=seq(from=0, to=0.4, by=0.001), type="l")
plot(x=sapply(seq(from=0, to=0.4, by=0.001), rp[[22]][[12]]), y=seq(from=0, to=0.4, by=0.001), type="l")
plot(x=sapply(seq(from=0, to=0.4, by=0.001), rp[[1]][[1]]), y=seq(from=0, to=0.4, by=0.001), type="l")
plot(x=sapply(seq(from=0, to=0.4, by=0.001), rp[[32]][[24]]), y=seq(from=0, to=0.4, by=0.001), type="l")
sheardata
size_class
test <- size_class$w
test <- size_class$ws
test
test/sum(test)
sum(test/sum(test))
test/sum(test)
sheardata
size_class
test
test*5400
2^6
c(2, 2)^c(1, 2)
c(2, 2, 3)^c(1, 2, 4)
?combn
expand.grid(c(1, 2, 3))
expand.grid(c(1, 2, 3), c(4, 5, 6))
response <- c(0.95, 0.978, 0.762, 0.733, 0.823, 1.011) #ratio of Visiplume readings to EPA readings
recip <- response^-1
df <- data.frame(response, recip)
response
df
expand.grid(df)
expand.grid(as.matrix(df))
expand.grid(t(df))
t(df)
expand.grid(t(df) %>% as.data.frame())
response <- c(0.95, 0.978, 0.762, 0.733, 0.823, 1.011) #ratio of Visiplume readings to EPA readings
recip <- response^-1
all_outcomes <- data.frame(response, recip) %>%
t() %>%
as.data.frame() %>%
expand.grid()
all_outcomes
class(all_outcomes)
rowsum(all_outcomes)
?rowsum
as.matrix(all_outcomes)
as.matrix(all_outcomes) %>% rowsum()
all_outcomes <- data.frame(response, recip) %>%
t() %>%
as.data.frame() %>%
expand.grid() %>%
data.frame(index=1:(2^length(response))) %>%
rowsum(group=index)
all_outcomes <- data.frame(response, recip) %>%
t() %>%
as.data.frame() %>%
expand.grid() %>%
data.frame(index=1:(2^length(response)))
all_outcomes
all_outcomes <- data.frame(response, recip) %>%
t() %>%
as.data.frame() %>%
expand.grid() %>%
rowsum(group=1:(2^length(response)))
all_outcomes
all_outcomes <- data.frame(response, recip) %>%
t() %>%
as.data.frame() %>%
expand.grid() %>%
rowsum(group=1)
?rowsums
?rowSums
all_outcomes <- data.frame(response, recip) %>%
t() %>%
as.data.frame() %>%
expand.grid() %>%
rowSums()
all_outcomes
hist(all_outcomes)
library(ggplot2)
ggplot(aes(all_outcomes))+geom_histogram(bins=50)
ggplot(data.frame(all_outcomes), aes(x=all_outcomes))+geom_histogram(bins=50)
ggplot(data.frame(all_outcomes), aes(x=all_outcomes))+geom_histogram(bins=80)
ggplot(data.frame(all_outcomes), aes(x=all_outcomes))+geom_histogram(bins=40)
ggplot(data.frame(all_outcomes), aes(x=all_outcomes))+geom_histogram(bins=20)
ggplot(data.frame(all_outcomes), aes(x=all_outcomes))+geom_histogram(bins=32)
ggplot(data.frame(all_outcomes), aes(x=all_outcomes))+geom_histogram(bins=30)
ggplot(data.frame(all_outcomes), aes(x=all_outcomes))+geom_histogram(bins=30, col="black", fill="white")
ggplot(data.frame(all_outcomes), aes(x=all_outcomes))+geom_histogram(bins=30, col="black", fill="white")+labs(x="Test statistic", y="Count")
ggplot(data.frame(all_outcomes), aes(x=all_outcomes))+geom_histogram(bins=30, col="black", fill="white")+labs(x="Test statistic", y="Count")+geom_vline(xintercept=sum(response), col="red", lty=2)
ggplot(data.frame(all_outcomes), aes(x=all_outcomes))+geom_histogram(bins=28, col="black", fill="white")+labs(x="Test statistic", y="Count")+geom_vline(xintercept=sum(response), col="red", lty=2)
sum(response)
mean(all_outcomes<sum(response))
mean(all_outcomes<10)
file.choose()
mothers <- read.csv("C:\\Users\\Bearkey\\Documents\\STAT158\\hw_01\\mothers.txt")
head(mothers)
?read.table
mothers <- fread("C:\\Users\\Bearkey\\Documents\\STAT158\\hw_01\\mothers.txt", data.table=FALSE)
mothers
mothers %>%
tidyr::gather(key=category, value=A, B, C, D, IR)
mothers %>%
tidyr::gather(key=category, value=number, A, B, C, D, IR)
mothers %>%
tidyr::gather(key=category, value=number, A, B, C, D, IR) %>%
group_by(Type, category) %>%
summarise(mean_number=mean(number))
head(mothers)
mothers %>%
group_by(Type) %>%
summarise(meanDiffAC=mean(DiffAC)) %>%
as.data.frame()
head(mothers)
ggplot(mothers, aes(A, C))+
geom_point()+
facet_wrap(.~Type)
ggplot(mothers, aes(A, C))+
geom_point()+
facet_wrap(Type~.)
ggplot(mothers, aes(A, C))+
geom_point()+
facet_wrap(.~Type)
ggplot(mothers, aes(A, C))+geom_point()+facet_grid(Type~.)
ggplot(mothers, aes(A, C))+geom_point()+facet_grid(.~Type)
ggplot(mothers, aes(A, C))+geom_point()+facet_grid(Type~.)
ggplot(mothers, aes(A, C))+geom_point()+facet_grid(.~Type)
?dotplot
dotchart(mothers, groups=Type)
dotchart(filter(mothers, Type=="Control")[,"DiffAC"], groups=Type)
dotchart(filter(mothers, Type=="Control")[,"DiffAC"])
dotchart(filter(mothers, Type=="Control")[,"DiffAC"], main="Control")
mothers
mothers %>%
group_by(Type) %>%
summarise(mean=mean(DiffAC), var=variance(DiffAC)) %>%
as.data.frame()
mothers %>%
group_by(Type) %>%
summarise(mean=mean(DiffAC), var=var(DiffAC)) %>%
as.data.frame()
(6.45+6.9474)/20
2.15/sqrt((6.45+6.9474)/20)
(6.45+6.9474)/20)^2
((6.45+6.9474)/20)^2
((6.45/20)^2)/19
?pnorm
?pt
p <- pt(-2.6269, df=38)*2
p
?wilcox.test
control <- filter(mothers, Type=="Control")[,"DiffAC"]
schizophrenic <- filter(mothers, Type=="Schizophrenic")[,"DiffAC"]
wilcox.test(x=control, y=schizophrenic, alternative="two.sided")
w <- wilcox.test(x=control, y=schizophrenic, alternative="two.sided")
w$p.value
pt(-2.6269, df=38)*2
rm(list=ls())
#Run all scripts
keep <- c("parameters", "sheardata", "size_class", "concentrationdata")
setwd("C:\\Users\\Bearkey\\Documents\\honors_thesis\\code")
source("01_parametric_particle_sizes.R")
source("02_shear_velocity.R")
source("03_concentration_ts.R")
rm(list=ls()[!(ls() %in% keep)])
concentrationdata
rm(list=ls())
#Run all scripts
keep <- c("parameters", "sheardata", "size_class", "concentrationdata")
setwd("C:\\Users\\Bearkey\\Documents\\honors_thesis\\code")
source("01_parametric_particle_sizes.R")
source("02_shear_velocity.R")
source("03_concentration_ts.R")
rm(list=ls()[!(ls() %in% keep)])
concentrationdata
data <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\1115pumpdata.csv", data.table=FALSE) %>% #reading in the data
select(-2, -6, -7, -9, -10) #selecting the important fields
names(data) <- c("time", "location", "height", "vol", "mass") #giving more succinct field names
data <- data %>%
filter(!is.na(time)) %>% #removing the blanks
mutate(height=height/100, vol=vol/1000, mass=mass) %>% #height in m, volume in L, mass in g
mutate(mvc=mass/vol) #mass concentration in g/L, same as kg/m3
concentrationdata <- data %>%
select(height, location, time, mvc) %>% #selecting the important fields
arrange(height, location, time) #rearranging the rows for r
data
data <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\1115pumpdata.csv", data.table=FALSE) %>% #reading in the data
select(-2, -6, -7, -9, -10)
data
?seq
times <- seq(from=0, by=300, length.out=nrow(data)/6)
times
times <- rep(seq(from=0, by=300, length.out=nrow(data)/6), times=6)
times
#03 Peristaltic Pump Sediment Concentration Time Series
#This script processes the data from peristaltic pump samples for use in the settling velocity computation.
library(data.table)
library(dplyr)
library(magrittr)
#Processing the data
data <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\1115pumpdata.csv", data.table=FALSE) %>% #reading in the data
select(-2, -6, -7, -9, -10) #selecting the important fields
names(data) <- c("time", "location", "height", "vol", "mass") #giving more succinct field names
times <- rep(seq(from=0, by=300, length.out=nrow(data)/6), times=6)
data <- data %>%
#filter(!is.na(time)) %>% #removing the blanks
arrange(location, height) %>%
mutate(time=times, height=height/100, vol=vol/1000, mass=mass) %>% #height in m, volume in L, mass in g
mutate(mvc=mass/vol) #mass concentration in g/L, same as kg/m3
concentrationdata <- data %>%
select(height, location, time, mvc) %>% #selecting the important fields
arrange(height, location, time) #rearranging the rows for readibility
data
#03 Peristaltic Pump Sediment Concentration Time Series
#This script processes the data from peristaltic pump samples for use in the settling velocity computation.
library(data.table)
library(dplyr)
library(magrittr)
#Processing the data
data <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\1115pumpdata.csv", data.table=FALSE) %>% #reading in the data
select(-2, -6, -7, -9, -10) #selecting the important fields
names(data) <- c("time", "location", "height", "vol", "mass") #giving more succinct field names
times <- rep(seq(from=-300, by=300, length.out=nrow(data)/6), times=6)
data <- data %>%
#filter(!is.na(time)) %>% #removing the blanks
arrange(location, height) %>%
mutate(time=times, height=height/100, vol=vol/1000, mass=mass) %>% #height in m, volume in L, mass in g
mutate(mvc=mass/vol) #mass concentration in g/L, same as kg/m3
concentrationdata <- data %>%
select(height, location, time, mvc) %>% #selecting the important fields
arrange(height, location, time) #rearranging the rows for readibility
concentrationdata
#03 Peristaltic Pump Sediment Concentration Time Series
#This script processes the data from peristaltic pump samples for use in the settling velocity computation.
library(data.table)
library(dplyr)
library(magrittr)
#Processing the data
data <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\1115pumpdata.csv", data.table=FALSE) %>% #reading in the data
select(-2, -6, -7, -9, -10) #selecting the important fields
names(data) <- c("time", "location", "height", "vol", "mass") #giving more succinct field names
times <- rep(seq(from=-300, by=300, length.out=nrow(data)/6), times=6)
data <- data %>%
#filter(!is.na(time)) %>% #removing the blanks
arrange(location, height) %>%
mutate(time=times, height=height/100, vol=vol/1000, mass=mass) %>% #height in m, volume in L, mass in g
mutate(mvc=mass/vol) #mass concentration in g/L, same as kg/m3
concentrationdata <- data %>%
select(height, location, time, mvc) %>% #selecting the important fields
filter(time>=0) %>%
arrange(height, location, time) #rearranging the rows for readibility
ggplot(concentrationdata, aes(time, mvc))+geom_line(aes(col=as.character(height)))+facet_grid(.~location)
ggplot(concentrationdata, aes(time, mvc))+geom_line(aes(col=as.character(height)))+facet_grid(location~.)
concentrationdata
#03 Peristaltic Pump Sediment Concentration Time Series
#This script processes the data from peristaltic pump samples for use in the settling velocity computation.
library(data.table)
library(dplyr)
library(ggplot2)
library(magrittr)
#Processing the data
data <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\1115pumpdata.csv", data.table=FALSE) %>% #reading in the data
select(-2, -6, -7, -9, -10) #selecting the important fields
names(data) <- c("time", "location", "height", "vol", "mass") #giving more succinct field names
times <- rep(seq(from=-600, by=300, length.out=nrow(data)/6), times=6)
data <- data %>%
#filter(!is.na(time)) %>% #removing the blanks
arrange(location, height) %>%
mutate(time=times, height=height/100, vol=vol/1000, mass=mass) %>% #height in m, volume in L, mass in g
mutate(mvc=mass/vol) #mass concentration in g/L, same as kg/m3
concentrationdata <- data %>%
select(height, location, time, mvc) %>% #selecting the important fields
filter(time>=0) %>%
arrange(height, location, time) #rearranging the rows for readibility
ggplot(concentrationdata, aes(time, mvc))+geom_line(aes(col=as.character(height)))+facet_grid(location~.)
ggplot(concentrationdata, aes(time, mvc))+geom_line(aes(col=location)+facet_grid(as.character(height)~.)
)
ggplot(concentrationdata, aes(time, mvc))+geom_line(aes(col=location)+facet_grid(height~.)
ggplot(concentrationdata, aes(time, mvc))+geom_line(aes(col=location))+facet_grid(height~.)
