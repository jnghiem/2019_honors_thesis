return(c(mu, sigma))
}
size_trunc <- filter(size, !(passing %in% c(0, 1))) #removing the 0 and 1 probability points because they are not well-defined
uniq <- combn(nrow(size_trunc), 2, simplify=FALSE) #all unique combinations of rows from edited data frame
estimates <- data.frame() #initializing a data frame to store parameter estimates for each pair
for (i in 1:length(uniq)) { #for loop to compute parameter estimates
estimates <- size_trunc[uniq[[i]],] %>%
param_est() %>%
rbind(estimates)
}
names(estimates) <- c("mu", "sigma") #renaming columns with better names
out <- optim(mapply(median, estimates), loss, lower=floor(mapply(min, estimates)), upper=ceiling(mapply(max, estimates)), method="L-BFGS-B", x=x)$par
#optimize by minimizing the RSS using the initial values and bounds from the rough estimates
#Plot the CDF
plot_func <- function(x) pnorm(x, mean=out[1], sd=out[2]) #a function to plot the CDF
curve(plot_func, from=0, to=max(x), xlab=expression(Particle~diameter~(mu~m)), ylab="Probability") #plotting the analytical CDF
abline(h=c(0, 0.5, 0.84, 1), lty=2) #plotting horizontal lines marking 0, D50 (median), D84, and 1
points(size, col="red", cex=2) #plotting the sieve analysis data
#Plot the PDF
pdf_func <- function(x) dnorm(x, mean=out[1], sd=out[2]) #a function to plot the PDF
curve(pdf_func, from=0, to=max(x), xlab=expression(Particle~diameter~(mu~m)), ylab="Density") #plotting the analytical PDF
abline(v=out[1], col="red", lty=2) #plotting a vertical line for the mean
abline(h=0, v=0, col="gray") #plotting gray lines for the axes
abline(v=c(abs(diff(out)), sum(out)), col="blue", lty=2) #plotting the intervals within one standard deviation
abline(v=c(out[1]-2*out[2], out[1]+2*out[2]), col="purple", lty=2) #plotting the intervals within two standard deviations
text(x=out[1], y=pdf_func(out[1]), labels=paste0("Mean = ", round(out[1], 4)), pos=4) #plotting label for the mean
rss <- sum((y-plot_func(x))^2) #computing the residual sum of squares
tss <- sum((y-mean(y))^2) #computing the total sum of squares
rsq <- 1-(rss/tss) #computing the coeffcient of determination to assess model fit
rsq
plot_func(300)
out[1]+2*out[2]
out[1]+3*out[2]
file.choose()
file.choose()
library(R.matlab)
?`R.matlab-package`
?readMat
file <- "C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\vectrino profile experiment 181205\\dowel velocity 2.mat"
data <- readMat(file)
data
data$Data
data$Data[[3]]
data$Data[[3]] %>% as.data.frame()
velocities <- as.vector(data$Data[[3]])
velocities
velocities <- data$Data$Profiles.VelX
velocities
velocities <- data$Data[[3]]
velocities
mean(velocities)
class(velocities)
velocities <- unlist(data$Data[[3]])
velocities
velocities <- unlist(data$Data[[3]]) %>% unname()
velcoities
velocities
mean(velocities)
sd(velocities)
hist(velocities)
file.choose()
metadata <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\vectrino profile experiment 181205\\positions.csv", data.table=FALSE)
library(data.table)
metadata <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\vectrino profile experiment 181205\\positions.csv", data.table=FALSE)
metadata
library(R.matlab)
library(data.table)
library(dplyr)
library(magrittr)
metadata <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\vectrino profile experiment 181205\\positions.csv", data.table=FALSE) %>%
select(3, 4)
names(metadata) <- c("height", "number")
metadata
str(metadata)
library(stringr)
?str_match
fileno <- str_match(file, pattern="([[:digit:]])\\.mat$")[,2] %>% as.numeric()
fileno
file <- "C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\vectrino profile experiment 181205\\dowel velocity 2.mat"
metadata <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\vectrino profile experiment 181205\\positions.csv", data.table=FALSE) %>%
select(3, 4) %>%
mutate(height=height/100)
names(metadata) <- c("height", "number")
fileno <- str_match(file, pattern="([[:digit:]])\\.mat$")[,2] %>% as.numeric()
height <- filter(metadata, number==fileno)[1,1]
file <- "C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\vectrino profile experiment 181205\\dowel velocity 2.mat"
metadata <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\vectrino profile experiment 181205\\positions.csv", data.table=FALSE) %>%
select(3, 4)
names(metadata) <- c("height", "number")
metadata <- mutate(metadata, height=height/100)
fileno <- str_match(file, pattern="([[:digit:]])\\.mat$")[,2] %>% as.numeric()
height <- filter(metadata, number==fileno)[1,1]
height
u
u <- mean(velocities)
u
rm(list=ls())
library(R.matlab)
library(data.table)
library(dplyr)
library(stringr)
library(magrittr)
setwd("C:\\Users\\Bearkey\\Documents\\honors_thesis\\code")
source("01_parametric_particle_sizes.R")
file <- "C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\vectrino profile experiment 181205\\dowel velocity 2.mat"
metadata <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\vectrino profile experiment 181205\\positions.csv", data.table=FALSE) %>%
select(3, 4)
names(metadata) <- c("height", "number")
metadata <- mutate(metadata, height=height/100)
fileno <- str_match(file, pattern="([[:digit:]])\\.mat$")[,2] %>% as.numeric()
height <- filter(metadata, number==fileno)[1,1]
data <- readMat(file)
velocities <- unlist(data$Data[[3]]) %>% unname()
u <- mean(velocities)
z0 <- (out[1]+3*out[2])*10^(-6)
shearv <- 0.4/(u*log(height/z0))
shearv
shearv <- unname(0.4/(u*log(height/z0)))
shearv
file <- "C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\vectrino profile experiment 181205\\dowel velocity 11.mat"
fileno <- str_match(file, pattern="([[:digit:]])\\.mat$")[,2] %>% as.numeric()
height <- filter(metadata, number==fileno)[1,1]
data <- readMat(file)
velocities <- unlist(data$Data[[3]]) %>% unname()
u <- mean(velocities)
z0 <- (out[1]+3*out[2])*10^(-6)
shearv <- unname(0.4/(u*log(height/z0)))
shearv
file <- "C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\vectrino profile experiment 181205\\dowel velocity 0.mat"
fileno <- str_match(file, pattern="([[:digit:]])\\.mat$")[,2] %>% as.numeric()
height <- filter(metadata, number==fileno)[1,1]
data <- readMat(file)
velocities <- unlist(data$Data[[3]]) %>% unname()
u <- mean(velocities)
z0 <- (out[1]+3*out[2])*10^(-6)
shearv <- unname(0.4/(u*log(height/z0)))
shearv
file <- "C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\vectrino profile experiment 181205\\dowel velocity 1.mat"
fileno <- str_match(file, pattern="([[:digit:]])\\.mat$")[,2] %>% as.numeric()
height <- filter(metadata, number==fileno)[1,1]
data <- readMat(file)
velocities <- unlist(data$Data[[3]]) %>% unname()
u <- mean(velocities)
z0 <- (out[1]+3*out[2])*10^(-6)
shearv <- unname(0.4/(u*log(height/z0)))
shearv
file <- "C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\vectrino profile experiment 181205\\dowel velocity 11.mat"
fileno <- str_match(file, pattern=" ([[:digit:]]+)\\.mat$")[,2] %>% as.numeric()
height <- filter(metadata, number==fileno)[1,1]
data <- readMat(file)
velocities <- unlist(data$Data[[3]]) %>% unname()
u <- mean(velocities)
z0 <- (out[1]+3*out[2])*10^(-6)
shearv <- unname(0.4/(u*log(height/z0)))
shearv
metadata <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\vectrino profile experiment 181205\\positions.csv", data.table=FALSE)
metadata
?list.files
file <- list.files("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\vectrino profile experiment 181205",
pattern="\\.mat$", full.names=TRUE)
file
metadata <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\vectrino profile experiment 181205\\positions.csv", data.table=FALSE) %>%
select(1:4)
names(metadata) <- c("dowels", "position", "height", "number")
metadata <- mutate(metadata, height=height/100)
metadata
rm(list=ls())
library(R.matlab)
library(data.table)
library(dplyr)
library(stringr)
library(magrittr)
setwd("C:\\Users\\Bearkey\\Documents\\honors_thesis\\code")
source("01_parametric_particle_sizes.R")
files <- list.files("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\vectrino profile experiment 181205", pattern="\\.mat$", full.names=TRUE)
z0 <- (out[1]+3*out[2])*10^(-6)
metadata <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\vectrino profile experiment 181205\\positions.csv", data.table=FALSE) %>%
select(1:4)
names(metadata) <- c("dowels", "relative_position", "height", "number")
metadata <- mutate(metadata, height=height/100)
sheardata <- data.frame()
for (i in 1:length(files)) {
file <- files[i]
fileno <- str_match(file, pattern=" ([[:digit:]]+)\\.mat$")[,2] %>% as.numeric()
row <- filter(metadata, number==fileno)
data <- readMat(file)
velocities <- unlist(data$Data[[3]]) %>% unname()
u <- mean(velocities)
add_df <- data.frame(row, shearv=unname(0.4/(u*log(row[,"height"]/z0))))
sheardata <- rbind(sheardata, add_df)
}
sheardata
str(sheardata)
sheardata <- arrange(sheardata, number)
shear_data
sheardata
file.choose()
data <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\1019pumpdata.csv", data.table=FALSE)
data
ncol(data)
data <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\1019pumpdata.csv", data.table=FALSE) %>%
select(-2, -6, -7, -9, -10)
data
data <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\1019pumpdata.csv", data.table=FALSE) %>%
select(-2, -6, -7, -9, -10)
names(data) <- c("time", "location", "height", "vol", "mass")
data <- data %>%
filter(!is.na(time)) %>%
mutate(height=height/100, vol=vol/1000, mass=mass/1000)
data
data <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\1019pumpdata.csv", data.table=FALSE) %>%
select(-2, -6, -7, -9, -10)
names(data) <- c("time", "location", "height", "vol", "mass")
density <- 1300 #density for 40/100 and 60/200 walnut shell in kg/m3
data <- data %>%
filter(!is.na(time)) %>%
mutate(height=height/100, vol=vol/1000, mass=mass/1000) %>%
mutate(sed_vol=mass/density)
data
data <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\1019pumpdata.csv", data.table=FALSE) %>%
select(-2, -6, -7, -9, -10)
names(data) <- c("time", "location", "height", "vol", "mass")
density <- 1300 #density for 40/100 and 60/200 walnut shell in kg/m3
data <- data %>%
filter(!is.na(time)) %>%
mutate(height=height/100, vol=vol/1000) %>%
mutate(mvc=mass/vol) #mass concentration in units of g/L
data
filter(data, time==7200)
filter(data, time==5400)
data <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\1019pumpdata.csv", data.table=FALSE) %>%
select(-2, -6, -7, -9, -10)
names(data) <- c("time", "location", "height", "vol", "mass")
density <- 1300 #density for 40/100 and 60/200 walnut shell in kg/m3
data <- data %>%
filter(!is.na(time)) %>%
mutate(height=height/100, vol=vol/1000000)
data
ata <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\1019pumpdata.csv", data.table=FALSE) %>%
select(-2, -6, -7, -9, -10)
names(data) <- c("time", "location", "height", "vol", "mass")
density <- 1300 #density for 40/100 and 60/200 walnut shell in kg/m3
data <- data %>%
filter(!is.na(time)) %>%
mutate(height=height/100, vol=vol/1000000, mass=mass*10^6) %>% #
mutate(mvc=mass/vol)
data <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\1019pumpdata.csv", data.table=FALSE) %>%
select(-2, -6, -7, -9, -10)
names(data) <- c("time", "location", "height", "vol", "mass")
density <- 1300 #density for 40/100 and 60/200 walnut shell in kg/m3
data <- data %>%
filter(!is.na(time)) %>%
mutate(height=height/100, vol=vol/1000000, mass=mass*10^6) %>% #
mutate(mvc=mass/vol)
rm(ata)
data
data <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\1019pumpdata.csv", data.table=FALSE) %>%
select(-2, -6, -7, -9, -10)
names(data) <- c("time", "location", "height", "vol", "mass")
density <- 1300 #density for 40/100 and 60/200 walnut shell in kg/m3
data <- data %>%
filter(!is.na(time)) %>%
mutate(height=height/100, vol=vol/1000000) %>% #
mutate(mvc=mass/vol)
data
data <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\1019pumpdata.csv", data.table=FALSE) %>%
select(-2, -6, -7, -9, -10)
names(data) <- c("time", "location", "height", "vol", "mass")
density <- 1300 #density for 40/100 and 60/200 walnut shell in kg/m3
data <- data %>%
filter(!is.na(time)) %>%
mutate(height=height/100, vol=vol/1000000, mass=mass/1000) %>% #
mutate(mvc=mass/vol)
data
data <- filter(data, location=="U", height==0.05) %>%
select(time, mvc) %>%
arrange(time)
data
pdf_func <- function(x) dnorm(x, mean=out[1], sd=out[2]) #a function to plot the PDF
curve(pdf_func, from=0, to=max(x), xlab=expression(Particle~diameter~(mu~m)), ylab="Density") #plotting the analytical PDF
abline(v=out[1], col="red", lty=2) #plotting a vertical line for the mean
abline(h=0, v=0, col="gray") #plotting gray lines for the axes
abline(v=c(abs(diff(out)), sum(out)), col="blue", lty=2) #plotting the intervals within one standard deviation
abline(v=c(out[1]-2*out[2], out[1]+2*out[2]), col="purple", lty=2) #plotting the intervals within two standard deviations
text(x=out[1], y=pdf_func(out[1]), labels=paste0("Mean = ", round(out[1], 4)), pos=4)
?pnorm
?integrate
int_func <- function(x) x*dnorm(x, mean=out[1], sd=out[2])
?integrate
int_func <- function(x) x*dnorm(x, mean=out[1], sd=out[2])
integrate(int_func, lower=0, upper=1)
integrate(int_func, lower=0, upper=400)
?sapply
int_func <- function(x) x*dnorm(x, mean=out[1], sd=out[2])
class_mean <- function(up) integrate(int_func, lower=up-1, upper=up)
sapply(1:330, class_mean)
test <- integrate(int_func, lower=0, upper=400)
test
class(test)
test$value
class_mean <- function(up) integrate(int_func, lower=up-1, upper=up)$value
sapply(1:330, class_mean)
size_class <- data.frame(class=1:330, mean=sapply(1:330, class_mean))
size_class
size_class$mean %>% sum()
int_func <- function(x) x*dnorm(x, mean=out[1], sd=out[2])
class_mean <- function(up) {
num <- integrate(int_func, lower=up-1, upper=up)$value
den <- integrate(function(x) dnorm(x, mean=out[1], sd=out[2]), lower=up-1, upper=up)
return(num/den)
}
size_class <- data.frame(class=1:330, mean=sapply(1:330, class_mean))
int_func <- function(x) x*dnorm(x, mean=out[1], sd=out[2])
class_mean <- function(up) {
num <- integrate(int_func, lower=up-1, upper=up)$value
den <- integrate(function(x) dnorm(x, mean=out[1], sd=out[2]), lower=up-1, upper=up)$value
return(num/den)
}
size_class <- data.frame(class=1:330, mean=sapply(1:330, class_mean))
size_class
clnum <- 32
int_func <- function(x) x*dnorm(x, mean=out[1], sd=out[2])
class_mean <- function(up) {
num <- integrate(int_func, lower=up-1, upper=up)$value
den <- integrate(function(x) dnorm(x, mean=out[1], sd=out[2]), lower=up-1, upper=up)$value
return(num/den)
}
size_class <- data.frame(class=1:clnum, mean=sapply(1:clnum, class_mean))
size_class
clnum <- 32
int_func <- function(x) x*dnorm(x, mean=out[1], sd=out[2])
class_mean <- function(up) {
num <- integrate(int_func, lower=up-1, upper=up)$value
#den <- integrate(function(x) dnorm(x, mean=out[1], sd=out[2]), lower=up-1, upper=up)$value
den <- 1
return(num/den)
}
size_class <- data.frame(class=1:clnum, mean=sapply(1:clnum, class_mean))
size_class
?pnorm
clnum <- 32
int_func <- function(x) x*dnorm(x, mean=out[1], sd=out[2])
class_mean <- function(up) {
num <- integrate(int_func, lower=up-1, upper=up)$value
den <- pnorm(up, mean=out[1], sd=out[2])-pnorm(up-1, mean=out[1], sd=out[2])
return(num/den)
}
size_class <- data.frame(class=1:clnum, mean=sapply(1:clnum, class_mean))
size_class
sum(size_class$mean)
clnum <- 32
bound <- 330/clnum
int_func <- function(x) x*dnorm(x, mean=out[1], sd=out[2])
class_mean <- function(up) {
num <- integrate(int_func, lower=bound*(up-1), upper=bound*up)$value
den <- pnorm(bound*up, mean=out[1], sd=out[2])-pnorm(bound*(up-1), mean=out[1], sd=out[2])
return(num/den)
}
size_class <- data.frame(class=1:clnum, mean=sapply(1:clnum, class_mean))
size_class
clnum <- 330
bound <- 330/clnum
int_func <- function(x) x*dnorm(x, mean=out[1], sd=out[2])
class_mean <- function(up) {
num <- integrate(int_func, lower=bound*(up-1), upper=bound*up)$value
den <- pnorm(bound*up, mean=out[1], sd=out[2])-pnorm(bound*(up-1), mean=out[1], sd=out[2])
return(num/den)
}
size_class <- data.frame(class=1:clnum, mean=sapply(1:clnum, class_mean))
size_class
clnum <- 3
bound <- 330/clnum
int_func <- function(x) x*dnorm(x, mean=out[1], sd=out[2])
class_mean <- function(up) {
num <- integrate(int_func, lower=bound*(up-1), upper=bound*up)$value
den <- pnorm(bound*up, mean=out[1], sd=out[2])-pnorm(bound*(up-1), mean=out[1], sd=out[2])
return(num/den)
}
size_class <- data.frame(class=1:clnum, mean=sapply(1:clnum, class_mean))
size_class
round(out[1]*2)
clnum <- 3 #set the number of classes
bound <- round(out[1]*2)/clnum #computes the size of each class
int_func <- function(x) x*dnorm(x, mean=out[1], sd=out[2])
class_mean <- function(up) {
num <- integrate(int_func, lower=bound*(up-1), upper=bound*up)$value
den <- pnorm(bound*up, mean=out[1], sd=out[2])-pnorm(bound*(up-1), mean=out[1], sd=out[2])
return(num/den)
}
size_class <- data.frame(class=1:clnum, mean=sapply(1:clnum, class_mean))
size_class
clnum <- 5 #set the number of classes
bound <- round(out[1]*2)/clnum #computes the size of each class
int_func <- function(x) x*dnorm(x, mean=out[1], sd=out[2])
class_mean <- function(up) {
num <- integrate(int_func, lower=bound*(up-1), upper=bound*up)$value
den <- pnorm(bound*up, mean=out[1], sd=out[2])-pnorm(bound*(up-1), mean=out[1], sd=out[2])
return(num/den)
}
size_class <- data.frame(class=1:clnum, mean=sapply(1:clnum, class_mean))
size_class
#01 Parametric (Normal Distribution) Particle Size Estimation from Sieve Analysis
#This script fits a normal distribution CDF to sieve analysis data. In effect, it is a parametric estimate of particle size distribution.
library(magrittr)
library(dplyr)
#Input (information from Composition Materials Sieve Analysis)
size <- data.frame(microns=c(420, 297, 250, 74), passing=c(1, 0.985, 0.95, 0.04)) #for 60/200 walnut shell
#size <- data.frame(microns=c(595, 420, 149, 74), passing=c(1, 0.975, 0.06, 0.0075)) #for 40/100 walnut shell
#Setup
rho_w <- 998.2071 #approximate water density at 20 degrees centigrade in kg/m3
rho_s <- 1300 #approximate walnut shell density in kg/m3
kv <- 1.0023*10^(-6) #approximate kinematic viscosity of water at 20 degrees centigrade in m2/s
size <- rbind(size, c(0, 0))
x <- size$microns #assigning the columns of size to individual vectors
y <- size$passing
loss <- function(par, x) sum((pnorm(x, par[1], par[2])-y)^2) #defining a quadratic loss function
#Estimate some guesses
param_est <- function(pair_df) { #a function to estimate mean and standard deviation of normal distn given two points on the CDF
pair <- pair_df$microns
prob <- pair_df$passing
sigma <- diff(pair)/diff(qnorm(prob))
mu <- pair[1]-qnorm(prob[1])*sigma
return(c(mu, sigma))
}
size_trunc <- filter(size, !(passing %in% c(0, 1))) #removing the 0 and 1 probability points because they are not well-defined
uniq <- combn(nrow(size_trunc), 2, simplify=FALSE) #all unique combinations of rows from edited data frame
estimates <- data.frame() #initializing a data frame to store parameter estimates for each pair
for (i in 1:length(uniq)) { #for loop to compute parameter estimates
estimates <- size_trunc[uniq[[i]],] %>%
param_est() %>%
rbind(estimates)
}
names(estimates) <- c("mu", "sigma") #renaming columns with better names
out <- optim(mapply(median, estimates), loss, lower=floor(mapply(min, estimates)), upper=ceiling(mapply(max, estimates)), method="L-BFGS-B", x=x)$par
#optimize by minimizing the RSS using the initial values and bounds from the rough estimates
#Plot the CDF
plot_func <- function(x) pnorm(x, mean=out[1], sd=out[2]) #a function to plot the CDF
curve(plot_func, from=0, to=max(x), xlab=expression(Particle~diameter~(mu~m)), ylab="Probability") #plotting the analytical CDF
abline(h=c(0, 0.5, 0.84, 1), lty=2) #plotting horizontal lines marking 0, D50 (median), D84, and 1
points(size, col="red", cex=2) #plotting the sieve analysis data
#Plot the PDF
pdf_func <- function(x) dnorm(x, mean=out[1], sd=out[2]) #a function to plot the PDF
curve(pdf_func, from=0, to=max(x), xlab=expression(Particle~diameter~(mu~m)), ylab="Density") #plotting the analytical PDF
abline(v=out[1], col="red", lty=2) #plotting a vertical line for the mean
abline(h=0, v=0, col="gray") #plotting gray lines for the axes
abline(v=c(abs(diff(out)), sum(out)), col="blue", lty=2) #plotting the intervals within one standard deviation
abline(v=c(out[1]-2*out[2], out[1]+2*out[2]), col="purple", lty=2) #plotting the intervals within two standard deviations
text(x=out[1], y=pdf_func(out[1]), labels=paste0("Mean = ", round(out[1], 4)), pos=4) #plotting label for the mean
rss <- sum((y-plot_func(x))^2) #computing the residual sum of squares
tss <- sum((y-mean(y))^2) #computing the total sum of squares
rsq <- 1-(rss/tss) #computing the coeffcient of determination to assess model fit
#Create size classes and find their means
clnum <- 5 #set the number of classes
bound <- round(out[1]*2)/clnum #computes the size of each class
int_func <- function(x) x*dnorm(x, mean=out[1], sd=out[2]) #a function to integrate to find the expectation
class_mean <- function(up) { #a function to integrate and then normalize to find the mean size within certain bounds
num <- integrate(int_func, lower=bound*(up-1), upper=bound*up)$value
den <- pnorm(bound*up, mean=out[1], sd=out[2])-pnorm(bound*(up-1), mean=out[1], sd=out[2])
return(num/den)
}
dstar_func <- function(d) ((rho_s-rho_w)*9.81*d^3)/(rho_w*kv^2)
size_class <- data.frame(class=1:clnum, mean=sapply(1:clnum, class_mean)) %>% #data by class number and mean particle diameter
mutate(dstar=sapply(class_mean, dstar_func))
?sapply
size_class <- data.frame(class=1:clnum, mean=sapply(1:clnum, class_mean)) %>% #data by class number and mean particle diameter
mutate(dstar=dstar_func(class_mean))
size_class <- data.frame(class=1:clnum, mean=sapply(1:clnum, class_mean)) %>% #data by class number and mean particle diameter
mutate(dstar=dstar_func(mean))
size_class
size_class <- data.frame(class=1:clnum, mean=sapply(1:clnum, class_mean)) %>% #data by class number and mean particle diameter
mutate(dstar=dstar_func(mean*10^(-6)))
size_class
clnum <- 32 #set the number of classes
bound <- round(out[1]*2)/clnum #computes the size of each class
int_func <- function(x) x*dnorm(x, mean=out[1], sd=out[2]) #a function to integrate to find the expectation
class_mean <- function(up) { #a function to integrate and then normalize to find the mean size within certain bounds
num <- integrate(int_func, lower=bound*(up-1), upper=bound*up)$value
den <- pnorm(bound*up, mean=out[1], sd=out[2])-pnorm(bound*(up-1), mean=out[1], sd=out[2])
return(num/den)
}
dstar_func <- function(d) ((rho_s-rho_w)*9.81*d^3)/(rho_w*kv^2) #a function to compute D* (from Dietrich 1982)
size_class <- data.frame(class=1:clnum, mean=sapply(1:clnum, class_mean)) %>% #data by class number and mean particle diameter
mutate(dstar=dstar_func(mean*10^(-6)))
size_class
rep(bound, times=32) %>% cumsum()
dstar_func <- function(d) ((rho_s-rho_w)*9.81*d^3)/(rho_w*kv^2) #a function to compute D* (from Dietrich 1982)
size_class <- data.frame(class=1:clnum, upper=rep(bound, times=clnum) %>% cumsum(), mean=sapply(1:clnum, class_mean)) %>% #data by class number and mean particle diameter
mutate(dstar=dstar_func(mean*10^(-6)), lower=upper-bound) %>%
select(class, lower, upper, mean, dstar)
size_class
data <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\1019pumpdata.csv", data.table=FALSE) %>%
select(-2, -6, -7, -9, -10)
names(data) <- c("time", "location", "height", "vol", "mass")
density <- 1300 #density for 40/100 and 60/200 walnut shell in kg/m3
data <- data %>%
filter(!is.na(time)) %>%
mutate(height=height/100, vol=vol/1000000, mass=mass/1000) %>% #height in m, volume in m3, mass in kg
mutate(mvc=mass/vol) #mass concentration in kg/m3
data <- filter(data, location=="U", height==0.05) %>%
select(time, mvc) %>%
arrange(time)
refh <- 0.05
data
data <- fread("C:\\Users\\Bearkey\\Documents\\Ecogeomorphic_Flume\\esdlflume\\data\\raw\\1019pumpdata.csv", data.table=FALSE) %>%
select(-2, -6, -7, -9, -10)
names(data) <- c("time", "location", "height", "vol", "mass")
density <- 1300 #density for 40/100 and 60/200 walnut shell in kg/m3
data <- data %>%
filter(!is.na(time)) %>%
mutate(height=height/100, vol=vol/1000000, mass=mass/1000) %>% #height in m, volume in m3, mass in kg
mutate(mvc=mass/vol) #mass concentration in kg/m3
data
