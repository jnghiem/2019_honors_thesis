intgr_fn <- function(initial, k, t0=5400, tf=time_limit) {
coef <- initial/k
first <- exp(-k*t0)
second <- exp(-k*tf)
return(coef*(first-second))
}
tm_intgr <- c()
for (i in 1:length(files)) {
params <- filter(estimated_parameters, treatment==i)
tm_intgr <- c(tm_intgr, intgr_fn(params[,"initial"], params[,"k"]))
}
tm_mean_diff <- -diff(tm_intgr)/(time_limit-5400) #the time-averaged difference in concentration between the experiments for the final 10 min
diff_inf <- estimated_parameters %>%
mutate(inf_int=initial/k) %>%
extract(,"inf_int") %>%
diff() %>%
abs() #the difference of the concentrations integrated from t=0 to infinity, not really interpretable but maybe a useful metric?
#Final visualization
ggplot(data, aes(time, mc, col=as.character(treatment)))+
geom_point()+
geom_vline(xintercept=c(5400, 6000), col="orange")+
stat_function(data=data.frame(x=seq(0, 6000, length.out=300)), fun=conc_fn[[1]], col="red", aes(x=x), inherit.aes=FALSE)+
stat_function(data=data.frame(x=seq(0, 6000, length.out=300)), fun=conc_fn[[2]], col="blue", aes(x=x), inherit.aes=FALSE)
files
data <- lapply(files, readRDS)
rm(list=ls())
files <- list.files("C:\\Users\\Bearkey\\Documents\\honors_thesis\\data\\pump", full.names=TRUE)
data <- lapply(files, readRDS)
treatments <- rep(seq(from=1, to=length(files)), times=sapply(data, nrow))
data <- plyr::rbind.fill(data) %>%
mutate(treatment=treatments)
time_limit <- data %>%
group_by(treatment) %>%
summarise(max_time=max(time)) %>%
extract(,2) %>%
min()
data <- mutate(data, time<=time_limit)
time_limit <- data %>%
group_by(treatment) %>%
summarise(max_time=max(time)) %>%
extract(,2) %>%
min()
library(dplyr)
#Read in the pump data
files <- list.files("C:\\Users\\Bearkey\\Documents\\honors_thesis\\data\\pump", full.names=TRUE)
data <- lapply(files, readRDS)
treatments <- rep(seq(from=1, to=length(files)), times=sapply(data, nrow))
data <- plyr::rbind.fill(data) %>%
mutate(treatment=treatments)
time_limit <- data %>%
group_by(treatment) %>%
summarise(max_time=max(time)) %>%
magrittr::extract(,2) %>%
min()
data <- mutate(data, time<=time_limit)
#Plot for a quick visualization
ggplot(data, aes(time, mc, col=as.character(treatment)))+
geom_point()+
geom_vline(xintercept=c(5400, 6000), col="orange")
estimated_parameters <- data.frame()
#Estimate concentration parameters
conc_est <- function(tm) { #a function to return a function with the estimated parameters
data_fit <- filter(data, treatment==tm)
coefs <- lm(log_mc~time, data=data_fit) %>% coef() %>% unname()
estimated_parameters <<- rbind(estimated_parameters, data.frame(initial=exp(coefs[1]), k=-coefs[2], treatment=tm))
return(function(x) exp(coefs[1])*exp(coefs[2]*x))
}
conc_fn <- lapply(1:length(files), conc_est) #a list of functions to model concentration, one for each experiment
#Compute the coefficient of determination
rsq_fn <- function(tm) {
data_fit <- filter(data, treatment==tm) %>%
mutate(fitted_mc=conc_fn[[tm]](time))
rss <- sum((data_fit$mc-data_fit$fitted_mc)^2)
tss <- sum((data_fit$mc-mean(data_fit$mc))^2)
return(1-(rss/tss))
}
rsq <- sapply(1:length(files), rsq_fn)
#Integrate to find the mean difference between curves from 5400 s to 6000 s (final 10 min of experiment)
intgr_fn <- function(initial, k, t0=5400, tf=time_limit) {
coef <- initial/k
first <- exp(-k*t0)
second <- exp(-k*tf)
return(coef*(first-second))
}
tm_intgr <- c()
for (i in 1:length(files)) {
params <- filter(estimated_parameters, treatment==i)
tm_intgr <- c(tm_intgr, intgr_fn(params[,"initial"], params[,"k"]))
}
tm_mean_diff <- -diff(tm_intgr)/(time_limit-5400) #the time-averaged difference in concentration between the experiments for the final 10 min
diff_inf <- estimated_parameters %>%
mutate(inf_int=initial/k) %>%
extract(,"inf_int") %>%
diff() %>%
abs() #the difference of the concentrations integrated from t=0 to infinity, not really interpretable but maybe a useful metric?
#Final visualization
ggplot(data, aes(time, mc, col=as.character(treatment)))+
geom_point()+
geom_vline(xintercept=c(5400, 6000), col="orange")+
stat_function(data=data.frame(x=seq(0, 6000, length.out=300)), fun=conc_fn[[1]], col="red", aes(x=x), inherit.aes=FALSE)+
stat_function(data=data.frame(x=seq(0, 6000, length.out=300)), fun=conc_fn[[2]], col="blue", aes(x=x), inherit.aes=FALSE)
time_limit <- data %>%
group_by(treatment) %>%
summarise(max_time=max(time))
time_limit
time_limit <- data %>%
group_by(treatment) %>%
summarise(max_time=max(time)) %>%
magrittr::extract(,2)
time_limit
time_limit <- data %>%
group_by(treatment) %>%
summarise(max_time=max(time)) %>%
magrittr::extract(,2) %>%
min()
time_limit
library(magrittr)
library(dplyr)
#Read in the pump data
files <- list.files("C:\\Users\\Bearkey\\Documents\\honors_thesis\\data\\pump", full.names=TRUE)
data <- lapply(files, readRDS)
treatments <- rep(seq(from=1, to=length(files)), times=sapply(data, nrow))
data <- plyr::rbind.fill(data) %>%
mutate(treatment=treatments)
time_limit <- data %>%
group_by(treatment) %>%
summarise(max_time=max(time)) %>%
magrittr::extract(,2) %>%
min()
data <- mutate(data, time<=time_limit)
#Plot for a quick visualization
ggplot(data, aes(time, mc, col=as.character(treatment)))+
geom_point()+
geom_vline(xintercept=c(5400, 6000), col="orange")
estimated_parameters <- data.frame()
#Estimate concentration parameters
conc_est <- function(tm) { #a function to return a function with the estimated parameters
data_fit <- filter(data, treatment==tm)
coefs <- lm(log_mc~time, data=data_fit) %>% coef() %>% unname()
estimated_parameters <<- rbind(estimated_parameters, data.frame(initial=exp(coefs[1]), k=-coefs[2], treatment=tm))
return(function(x) exp(coefs[1])*exp(coefs[2]*x))
}
conc_fn <- lapply(1:length(files), conc_est) #a list of functions to model concentration, one for each experiment
#Compute the coefficient of determination
rsq_fn <- function(tm) {
data_fit <- filter(data, treatment==tm) %>%
mutate(fitted_mc=conc_fn[[tm]](time))
rss <- sum((data_fit$mc-data_fit$fitted_mc)^2)
tss <- sum((data_fit$mc-mean(data_fit$mc))^2)
return(1-(rss/tss))
}
rsq <- sapply(1:length(files), rsq_fn)
#Integrate to find the mean difference between curves from 5400 s to 6000 s (final 10 min of experiment)
intgr_fn <- function(initial, k, t0=5400, tf=time_limit) {
coef <- initial/k
first <- exp(-k*t0)
second <- exp(-k*tf)
return(coef*(first-second))
}
tm_intgr <- c()
for (i in 1:length(files)) {
params <- filter(estimated_parameters, treatment==i)
tm_intgr <- c(tm_intgr, intgr_fn(params[,"initial"], params[,"k"]))
}
tm_mean_diff <- -diff(tm_intgr)/(time_limit-5400) #the time-averaged difference in concentration between the experiments for the final 10 min
diff_inf <- estimated_parameters %>%
mutate(inf_int=initial/k) %>%
extract(,"inf_int") %>%
diff() %>%
abs() #the difference of the concentrations integrated from t=0 to infinity, not really interpretable but maybe a useful metric?
#Final visualization
ggplot(data, aes(time, mc, col=as.character(treatment)))+
geom_point()+
geom_vline(xintercept=c(5400, 6000), col="orange")+
stat_function(data=data.frame(x=seq(0, 6000, length.out=300)), fun=conc_fn[[1]], col="red", aes(x=x), inherit.aes=FALSE)+
stat_function(data=data.frame(x=seq(0, 6000, length.out=300)), fun=conc_fn[[2]], col="blue", aes(x=x), inherit.aes=FALSE)
library(magrittr)
library(dplyr)
#Read in the pump data
files <- list.files("C:\\Users\\Bearkey\\Documents\\honors_thesis\\data\\pump", full.names=TRUE)
data <- lapply(files, readRDS)
treatments <- rep(seq(from=1, to=length(files)), times=sapply(data, nrow))
data <- plyr::rbind.fill(data) %>%
mutate(treatment=treatments)
time_limit <- data %>%
group_by(treatment) %>%
summarise(max_time=max(time)) %>%
magrittr::extract(,2) %>%
min()
data <- mutate(data, time<=time_limit)
#Plot for a quick visualization
ggplot(data, aes(time, mc, col=as.character(treatment)))+
geom_point()+
geom_vline(xintercept=c(5400, 6000), col="orange")
estimated_parameters <- data.frame()
#Estimate concentration parameters
conc_est <- function(tm) { #a function to return a function with the estimated parameters
data_fit <- filter(data, treatment==tm)
coefs <- lm(log_mc~time, data=data_fit) %>% coef() %>% unname()
estimated_parameters <<- rbind(estimated_parameters, data.frame(initial=exp(coefs[1]), k=-coefs[2], treatment=tm))
return(function(x) exp(coefs[1])*exp(coefs[2]*x))
}
conc_fn <- lapply(1:length(files), conc_est) #a list of functions to model concentration, one for each experiment
#Compute the coefficient of determination
rsq_fn <- function(tm) {
data_fit <- filter(data, treatment==tm) %>%
mutate(fitted_mc=conc_fn[[tm]](time))
rss <- sum((data_fit$mc-data_fit$fitted_mc)^2)
tss <- sum((data_fit$mc-mean(data_fit$mc))^2)
return(1-(rss/tss))
}
rsq <- sapply(1:length(files), rsq_fn)
#Integrate to find the mean difference between curves from 5400 s to 6000 s (final 10 min of experiment)
intgr_fn <- function(initial, k, t0=5400, tf=time_limit) {
coef <- initial/k
first <- exp(-k*t0)
second <- exp(-k*tf)
return(coef*(first-second))
}
tm_intgr <- c()
for (i in 1:length(files)) {
params <- filter(estimated_parameters, treatment==i)
tm_intgr <- c(tm_intgr, intgr_fn(params[,"initial"], params[,"k"]))
}
tm_mean_diff <- -diff(tm_intgr)/(time_limit-5400) #the time-averaged difference in concentration between the experiments for the final 10 min
diff_inf <- estimated_parameters %>%
mutate(inf_int=initial/k) %>%
magrittr::extract(,"inf_int") %>%
diff() %>%
abs() #the difference of the concentrations integrated from t=0 to infinity, not really interpretable but maybe a useful metric?
#Final visualization
ggplot(data, aes(time, mc, col=as.character(treatment)))+
geom_point()+
geom_vline(xintercept=c(5400, 6000), col="orange")+
stat_function(data=data.frame(x=seq(0, 6000, length.out=300)), fun=conc_fn[[1]], col="red", aes(x=x), inherit.aes=FALSE)+
stat_function(data=data.frame(x=seq(0, 6000, length.out=300)), fun=conc_fn[[2]], col="blue", aes(x=x), inherit.aes=FALSE)
data
library(magrittr)
library(dplyr)
#Read in the pump data
files <- list.files("C:\\Users\\Bearkey\\Documents\\honors_thesis\\data\\pump", full.names=TRUE)
data <- lapply(files, readRDS)
treatments <- rep(seq(from=1, to=length(files)), times=sapply(data, nrow))
data <- plyr::rbind.fill(data) %>%
mutate(treatment=treatments)
time_limit <- data %>%
group_by(treatment) %>%
summarise(max_time=max(time)) %>%
magrittr::extract(,2) %>%
min()
data <- filter(data, time<=time_limit)
#Plot for a quick visualization
ggplot(data, aes(time, mc, col=as.character(treatment)))+
geom_point()+
geom_vline(xintercept=c(5400, 6000), col="orange")
estimated_parameters <- data.frame()
#Estimate concentration parameters
conc_est <- function(tm) { #a function to return a function with the estimated parameters
data_fit <- filter(data, treatment==tm)
coefs <- lm(log_mc~time, data=data_fit) %>% coef() %>% unname()
estimated_parameters <<- rbind(estimated_parameters, data.frame(initial=exp(coefs[1]), k=-coefs[2], treatment=tm))
return(function(x) exp(coefs[1])*exp(coefs[2]*x))
}
conc_fn <- lapply(1:length(files), conc_est) #a list of functions to model concentration, one for each experiment
#Compute the coefficient of determination
rsq_fn <- function(tm) {
data_fit <- filter(data, treatment==tm) %>%
mutate(fitted_mc=conc_fn[[tm]](time))
rss <- sum((data_fit$mc-data_fit$fitted_mc)^2)
tss <- sum((data_fit$mc-mean(data_fit$mc))^2)
return(1-(rss/tss))
}
rsq <- sapply(1:length(files), rsq_fn)
#Integrate to find the mean difference between curves from 5400 s to 6000 s (final 10 min of experiment)
intgr_fn <- function(initial, k, t0=5400, tf=time_limit) {
coef <- initial/k
first <- exp(-k*t0)
second <- exp(-k*tf)
return(coef*(first-second))
}
tm_intgr <- c()
for (i in 1:length(files)) {
params <- filter(estimated_parameters, treatment==i)
tm_intgr <- c(tm_intgr, intgr_fn(params[,"initial"], params[,"k"]))
}
tm_mean_diff <- -diff(tm_intgr)/(time_limit-5400) #the time-averaged difference in concentration between the experiments for the final 10 min
diff_inf <- estimated_parameters %>%
mutate(inf_int=initial/k) %>%
magrittr::extract(,"inf_int") %>%
diff() %>%
abs() #the difference of the concentrations integrated from t=0 to infinity, not really interpretable but maybe a useful metric?
#Final visualization
ggplot(data, aes(time, mc, col=as.character(treatment)))+
geom_point()+
geom_vline(xintercept=c(5400, 6000), col="orange")+
stat_function(data=data.frame(x=seq(0, 6000, length.out=300)), fun=conc_fn[[1]], col="red", aes(x=x), inherit.aes=FALSE)+
stat_function(data=data.frame(x=seq(0, 6000, length.out=300)), fun=conc_fn[[2]], col="blue", aes(x=x), inherit.aes=FALSE)
tm_mean_diff
ggplot(data, aes(time, mc, col=as.character(treatment)))+
geom_point()+
geom_vline(xintercept=c(5400, 6000), col="orange")+
stat_function(data=data.frame(x=seq(0, 6000, length.out=300)), fun=conc_fn[[1]], col="red", aes(x=x), inherit.aes=FALSE)+
stat_function(data=data.frame(x=seq(0, 6000, length.out=300)), fun=conc_fn[[2]], col="blue", aes(x=x), inherit.aes=FALSE)+
labs(x="Time (s)", y="Mass concentration (g/L)")+
theme(panel.background=element_rect(fill="white"), panel.grid.major=element_line(color="gray"), panel.border=element_rect("black", fill=NA))
?scale_color_manual
ggplot(data, aes(time, mc, col=as.character(treatment)))+
geom_point()+
geom_vline(xintercept=c(5400, 6000), col="orange")+
stat_function(data=data.frame(x=seq(0, 6000, length.out=300)), fun=conc_fn[[1]], col="red", aes(x=x), inherit.aes=FALSE)+
stat_function(data=data.frame(x=seq(0, 6000, length.out=300)), fun=conc_fn[[2]], col="blue", aes(x=x), inherit.aes=FALSE)+
labs(x="Time (s)", y="Mass concentration (g/L)")+
scale_color_manual(values=c("red", "blue"))+
theme(panel.background=element_rect(fill="white"), panel.grid.major=element_line(color="gray"), panel.border=element_rect("black", fill=NA))
tm_intgr
#07 Treatment Comparison
library(magrittr)
library(dplyr)
#Read in the pump data
files <- list.files("C:\\Users\\Bearkey\\Documents\\honors_thesis\\data\\pump", full.names=TRUE)
data <- lapply(files, readRDS)
treatments <- rep(seq(from=1, to=length(files)), times=sapply(data, nrow))
data <- plyr::rbind.fill(data) %>%
mutate(treatment=treatments)
time_limit <- data %>%
group_by(treatment) %>%
summarise(max_time=max(time)) %>%
magrittr::extract(,2) %>%
min()
data <- filter(data, time<=time_limit)
#Plot for a quick visualization
ggplot(data, aes(time, mc, col=as.character(treatment)))+
geom_point()+
geom_vline(xintercept=c(5400, 6000), col="orange")
estimated_parameters <- data.frame()
#Estimate concentration parameters
conc_est <- function(tm) { #a function to return a function with the estimated parameters
data_fit <- filter(data, treatment==tm)
coefs <- lm(log_mc~time, data=data_fit) %>% coef() %>% unname()
estimated_parameters <<- rbind(estimated_parameters, data.frame(initial=exp(coefs[1]), k=-coefs[2], treatment=tm))
return(function(x) exp(coefs[1])*exp(coefs[2]*x))
}
conc_fn <- lapply(1:length(files), conc_est) #a list of functions to model concentration, one for each experiment
#Compute the coefficient of determination
rsq_fn <- function(tm) {
data_fit <- filter(data, treatment==tm) %>%
mutate(fitted_mc=conc_fn[[tm]](time))
rss <- sum((data_fit$mc-data_fit$fitted_mc)^2)
tss <- sum((data_fit$mc-mean(data_fit$mc))^2)
return(1-(rss/tss))
}
rsq <- sapply(1:length(files), rsq_fn)
#Integrate to find the mean difference between curves from 5400 s to 6000 s (final 10 min of experiment)
intgr_fn <- function(initial, k, t0=5400, tf=time_limit) {
coef <- initial/k
first <- exp(-k*t0)
second <- exp(-k*tf)
return(coef*(first-second))
}
tm_intgr <- c()
for (i in 1:length(files)) {
params <- filter(estimated_parameters, treatment==i)
tm_intgr <- c(tm_intgr, intgr_fn(params[,"initial"], params[,"k"]))
}
tm_mean_diff <- -diff(tm_intgr)/(time_limit-5400) #the time-averaged difference in concentration between the experiments for the final 10 min
diff_inf <- estimated_parameters %>%
mutate(inf_int=initial/k) %>%
magrittr::extract(,"inf_int") %>%
diff() %>%
abs() #the difference of the concentrations integrated from t=0 to infinity, not really interpretable but maybe a useful metric?
#Final visualization
ggplot(data, aes(time, mc, col=as.character(treatment)))+
geom_point()+
geom_vline(xintercept=c(5400, 6000), col="orange")+
stat_function(data=data.frame(x=seq(0, 6000, length.out=300)), fun=conc_fn[[1]], col="red", aes(x=x), inherit.aes=FALSE)+
stat_function(data=data.frame(x=seq(0, 6000, length.out=300)), fun=conc_fn[[2]], col="blue", aes(x=x), inherit.aes=FALSE)+
labs(x="Time (s)", y="Mass concentration (g/L)")+
scale_color_manual(values=c("red", "blue"))+
theme(panel.background=element_rect(fill="white"), panel.grid.major=element_line(color="gray"), panel.border=element_rect("black", fill=NA))
files
ggplot(data, aes(time, mc, col=as.character(treatment)))+
geom_point(show.legend=FALSE)+
geom_vline(xintercept=c(5400, 6000), col="orange")+
stat_function(data=data.frame(x=seq(0, 6000, length.out=300)), fun=conc_fn[[1]], col="red", aes(x=x), inherit.aes=FALSE)+
stat_function(data=data.frame(x=seq(0, 6000, length.out=300)), fun=conc_fn[[2]], col="blue", aes(x=x), inherit.aes=FALSE)+
labs(x="Time (s)", y="Mass concentration (g/L)")+
scale_color_manual(values=c("red", "blue"))+
theme(panel.background=element_rect(fill="white"), panel.grid.major=element_line(color="gray"), panel.border=element_rect("black", fill=NA))
ggplot(data, aes(time, mc, col=as.character(treatment)))+
geom_point(show.legend=FALSE)+
geom_vline(xintercept=c(5400, 6000), col="orange", lty=2)+
stat_function(data=data.frame(x=seq(0, 6000, length.out=300)), fun=conc_fn[[1]], col="red", aes(x=x), inherit.aes=FALSE)+
stat_function(data=data.frame(x=seq(0, 6000, length.out=300)), fun=conc_fn[[2]], col="blue", aes(x=x), inherit.aes=FALSE)+
labs(x="Time (s)", y="Mass concentration (g/L)")+
scale_color_manual(values=c("red", "blue"))+
theme(panel.background=element_rect(fill="white"), panel.grid.major=element_line(color="gray"), panel.border=element_rect("black", fill=NA))
ggplot(data, aes(time, mc, col=as.character(treatment)))+
geom_point(show.legend=FALSE)+
geom_vline(xintercept=c(5400, 6000), col="purple", lty=2)+
stat_function(data=data.frame(x=seq(0, 6000, length.out=300)), fun=conc_fn[[1]], col="red", aes(x=x), inherit.aes=FALSE)+
stat_function(data=data.frame(x=seq(0, 6000, length.out=300)), fun=conc_fn[[2]], col="blue", aes(x=x), inherit.aes=FALSE)+
labs(x="Time (s)", y="Mass concentration (g/L)")+
scale_color_manual(values=c("red", "blue"))+
theme(panel.background=element_rect(fill="white"), panel.grid.major=element_line(color="gray"), panel.border=element_rect("black", fill=NA))
#Wilcoxon signed rank test with just the dowel and grease treatment
data <- readRDS("C:\\Users\\Bearkey\\Documents\\honors_thesis\\data\\pump/11152018pumpdata.rds")
rm(list=ls())
#Wilcoxon signed rank test with just the dowel and grease treatment
data <- readRDS("C:\\Users\\Bearkey\\Documents\\honors_thesis\\data\\pump/11152018pumpdata.rds")
head(data)
data <- readRDS("C:\\Users\\Bearkey\\Documents\\honors_thesis\\data\\pump/11152018pumpdata.rds") %>%
tidyr::spread(key=location, value=mc)
head(data)
#08 Location Comparison
#Wilcoxon signed rank test with just the dowel and grease treatment
data <- readRDS("C:\\Users\\Bearkey\\Documents\\honors_thesis\\data\\pump/11152018pumpdata.rds") %>%
select(-log_mc) %>%
tidyr::spread(key=location, value=mc)
head(dat)
head(data)
wilcox.test(x=data$U, y=data$D, alternative="greater", paired=TRUE)
wsr <- function(file) {
data <- readRDS(file) %>%
select(-log_mc) %>%
tidyr::spread(key=location, value=mc) %>%
mutate(diff=U-D) %>%
filter(!is.na(diff))
return(wilcox.test(x=data$U, y=data$D, alternative="greater", paired=TRUE))
}
wsr("C:\\Users\\Bearkey\\Documents\\honors_thesis\\data\\pump/11152018pumpdata.rds")
#Wilcoxon signed rank test with just the no dowel treatment
wsr("C:\\Users\\Bearkey\\Documents\\honors_thesis\\data\\pump/10192018pumpdata.rds")
files <- list.files("C:\\Users\\Bearkey\\Documents\\honors_thesis\\data\\pump", full.names=TRUE)
data <- lapply(files, readRDS)
treatments <- rep(seq(from=1, to=length(files)), times=sapply(data, nrow))
data <- plyr::rbind.fill(data) %>%
mutate(treatment=treatments) %>%
select(-log_mc)
data
files <- list.files("C:\\Users\\Bearkey\\Documents\\honors_thesis\\data\\pump", full.names=TRUE)
data <- lapply(files, readRDS)
treatments <- rep(seq(from=1, to=length(files)), times=sapply(data, nrow))
data <- plyr::rbind.fill(data) %>%
mutate(treatment=treatments) %>%
select(-log_mc) %>%
tidyr::spread(key=location, value=mc) %>%
mutate(diff=U-D) %>%
filter(!is.na(diff))
data
files <- list.files("C:\\Users\\Bearkey\\Documents\\honors_thesis\\data\\pump", full.names=TRUE)
data <- lapply(files, readRDS)
treatments <- rep(seq(from=1, to=length(files)), times=sapply(data, nrow))
data <- plyr::rbind.fill(data) %>%
mutate(treatment=treatments) %>%
select(-log_mc) %>%
tidyr::spread(key=location, value=mc) %>%
mutate(diff=U-D) %>%
filter(!is.na(diff))
wilcox.test(x=data$U, y=data$D, alternative="greater", paired=TRUE)
rm(list=ls())
#08 Mass Balance
#Upstream region
rho_w <- 998.2071 #approximate water density at 20 degrees centigrade in kg/m3
rho_s <- 1300 #approximate walnut shell density in kg/m3
kv <- 1.0023*10^(-6) #approximate kinematic viscosity of water at 20 degrees centigrade in m2/s
P <- 2 #Powers roundness index, 2 is slightly angular/subangular
csf <- 0.5 #Corey shape factor, 0.5 is intermediary between flatness and roundness
dstar_func <- function(d) ((rho_s-rho_w)*9.81*d^3)/(rho_w*kv^2) #a function to compute D* (from Dietrich 1982)
wstar_func <- function(dstar) { #a function to compute W* (from Dietrich 1982)
if (dstar<0.05) {
return((dstar^2)/5832)
} else if (dstar>5*10^9) {
return(NA)
} else {
r1 <- -3.76715+1.92944*log10(dstar)-(0.09815*(log10(dstar))^2)-(0.00575*(log10(dstar))^3)+(0.00056*(log10(dstar))^4)
}
r2 <- (log10(1-((1-csf)/0.85)))-(((1-csf)^2.3)*tanh(log10(dstar)-4.6))+(0.3*(0.5-csf)*(log10(dstar)-4.6)*(1-csf)^2)
r3exp <- 1+((3.5-P)/2.5)
r3 <- (0.65-((csf/2.83)*tanh(log10(dstar)-4.6)))^r3exp
return(r3*10^(r1+r2))
}
ws_func <- function(wstar) { #a function to compute Ws (from Dietrich 1982)
ftr <- ((rho_s-rho_w)*9.81*kv)/rho_w
return((ftr*wstar)^(1/3))
}
ws_d <- function(d) {
d %>%
dstar_func() %>%
wstar_func() %>%
ws_func() %>%
return()
}
ws_d(165*10^(-6))
curve(ws_d, from=0, to=330*10^(-6))
ws_d <- function(d) {
d %>%
dstar_func() %>%
wstar_func() %>%
ws_func() %>%
return()
}
ws_plot <- function(d) sapply(d, ws_d)
curve(ws_d, from=0, to=330*10^(-6))
ws_d <- function(d) {
d %>%
dstar_func() %>%
wstar_func() %>%
ws_func() %>%
return()
}
ws_plot <- function(d) sapply(d, ws_d)
curve(ws_plot, from=0, to=330*10^(-6))
